# Generated by apidoc - http://www.apidoc.me
# Service version: 0.0.38
# apidoc:0.11.29 http://www.apidoc.me/flow/harmonization/0.0.38/ruby_client

require 'cgi'
require 'net/http'
require 'net/https'
require 'uri'
require 'base64'

require 'date'
require 'rubygems'
require 'json'
require 'bigdecimal'

# API to harmonization to support tax and duty calculations as part of landed
# cost.
module Io
  module Flow
    module Harmonization
      module V0

        class Client

          module Constants

            BASE_URL = 'https://harmonization.api.flow.io' unless defined?(Constants::BASE_URL)
            NAMESPACE = 'io.flow.harmonization.v0' unless defined?(Constants::NAMESPACE)
            USER_AGENT = 'apidoc:0.11.29 http://www.apidoc.me/flow/harmonization/0.0.38/ruby_client' unless defined?(Constants::USER_AGENT)
            VERSION = '0.0.38' unless defined?(Constants::VERSION)
            VERSION_MAJOR = 0 unless defined?(VERSION_MAJOR)

          end

          attr_reader :url

          def initialize(url, opts={})
            @url = HttpClient::Preconditions.assert_class('url', url, String)
            @authorization = HttpClient::Preconditions.assert_class_or_nil('authorization', opts.delete(:authorization), HttpClient::Authorization)
            @default_headers = HttpClient::Preconditions.assert_class('default_headers', opts.delete(:default_headers) || {}, Hash)
            HttpClient::Preconditions.assert_empty_opts(opts)
            HttpClient::Preconditions.check_state(url.match(/http.+/i), "URL[%s] must start with http" % url)
          end

          # Creates an instance of the client using the base url specified in the API spec.
          def Client.at_base_url(opts={})
            Client.new(Constants::BASE_URL, opts)
          end

          def request(path=nil)
            HttpClient::Preconditions.assert_class_or_nil('path', path, String)
            request = HttpClient::Request.new(URI.parse(@url + path.to_s)).with_header('User-Agent', Constants::USER_AGENT).with_header('X-Apidoc-Version', Constants::VERSION).with_header('X-Apidoc-Version-Major', Constants::VERSION_MAJOR)

            @default_headers.each do |key, value|
              request = request.with_header(key, value)
            end

            if @authorization
              request = request.with_auth(@authorization)
            end

            request
          end

          def duties
            @duties ||= ::Io::Flow::Harmonization::V0::Clients::Duties.new(self)
          end

          def harmonization_settings
            @harmonization_settings ||= ::Io::Flow::Harmonization::V0::Clients::HarmonizationSettings.new(self)
          end

          def harmonized_items
            @harmonized_items ||= ::Io::Flow::Harmonization::V0::Clients::HarmonizedItems.new(self)
          end

          def harmonized_item_duties
            @harmonized_item_duties ||= ::Io::Flow::Harmonization::V0::Clients::HarmonizedItemDuties.new(self)
          end

          def hs10
            @hs10 ||= ::Io::Flow::Harmonization::V0::Clients::Hs10.new(self)
          end

          def hs6
            @hs6 ||= ::Io::Flow::Harmonization::V0::Clients::Hs6.new(self)
          end

          def taxes
            @taxes ||= ::Io::Flow::Harmonization::V0::Clients::Taxes.new(self)
          end
        end

        module Clients

          class Duties

            def initialize(client)
              @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::Harmonization::V0::Client)
            end

            def get(organization, origin, incoming={})
              HttpClient::Preconditions.assert_class('organization', organization, String)
              HttpClient::Preconditions.assert_class('origin', origin, String)
              opts = HttpClient::Helper.symbolize_keys(incoming)
              query = {
                :number => HttpClient::Preconditions.assert_class('number', opts.delete(:number), String),
                :address => (x = opts.delete(:address); x.nil? ? nil : HttpClient::Preconditions.assert_class('address', x, String)),
                :ip => (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String)),
                :latitude => (x = opts.delete(:latitude); x.nil? ? nil : HttpClient::Preconditions.assert_class('latitude', x, String)),
                :longitude => (x = opts.delete(:longitude); x.nil? ? nil : HttpClient::Preconditions.assert_class('longitude', x, String))
              }.delete_if { |k, v| v.nil? }
              r = @client.request("/#{CGI.escape(organization)}/harmonization/duties/#{CGI.escape(origin)}").with_query(query).get
              ::Io::Flow::Harmonization::V0::Models::Duty.new(r)
            end

          end

          class HarmonizationSettings

            def initialize(client)
              @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::Harmonization::V0::Client)
            end

            def get(organization)
              HttpClient::Preconditions.assert_class('organization', organization, String)
              r = @client.request("/#{CGI.escape(organization)}/harmonization/settings").get
              ::Io::Flow::Harmonization::V0::Models::HarmonizationSettings.new(r)
            end

            def put(organization, harmonization_settings_form)
              HttpClient::Preconditions.assert_class('organization', organization, String)
              HttpClient::Preconditions.assert_class('harmonization_settings_form', harmonization_settings_form, ::Io::Flow::Harmonization::V0::Models::HarmonizationSettingsForm)
              r = @client.request("/#{CGI.escape(organization)}/harmonization/settings").with_json(harmonization_settings_form.to_json).put
              ::Io::Flow::Harmonization::V0::Models::HarmonizationSettings.new(r)
            end

          end

          class HarmonizedItems

            def initialize(client)
              @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::Harmonization::V0::Client)
            end

            def get(organization, incoming={})
              HttpClient::Preconditions.assert_class('organization', organization, String)
              opts = HttpClient::Helper.symbolize_keys(incoming)
              query = {
                :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
                :number => (x = opts.delete(:number); x.nil? ? nil : HttpClient::Preconditions.assert_class('number', x, Array).map { |v| HttpClient::Preconditions.assert_class('number', v, String) }),
                :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
                :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
                :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
              }.delete_if { |k, v| v.nil? }
              r = @client.request("/#{CGI.escape(organization)}/harmonization/items").with_query(query).get
              r.map { |x| ::Io::Flow::Harmonization::V0::Models::HarmonizedItem.new(x) }
            end

            # Provides visibility into recent changes of each object, including deletion
            def get_versions(organization, incoming={})
              HttpClient::Preconditions.assert_class('organization', organization, String)
              opts = HttpClient::Helper.symbolize_keys(incoming)
              query = {
                :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
                :item_id => (x = opts.delete(:item_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('item_id', x, Array).map { |v| HttpClient::Preconditions.assert_class('item_id', v, String) }),
                :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
                :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
                :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
              }.delete_if { |k, v| v.nil? }
              r = @client.request("/#{CGI.escape(organization)}/harmonization/items/versions").with_query(query).get
              r.map { |x| ::Io::Flow::Harmonization::V0::Models::HarmonizedItemVersion.new(x) }
            end

            def get_by_number(organization, number)
              HttpClient::Preconditions.assert_class('organization', organization, String)
              HttpClient::Preconditions.assert_class('number', number, String)
              r = @client.request("/#{CGI.escape(organization)}/harmonization/items/#{CGI.escape(number)}").get
              ::Io::Flow::Harmonization::V0::Models::HarmonizedItem.new(r)
            end

            def post(organization, harmonized_item_form)
              HttpClient::Preconditions.assert_class('organization', organization, String)
              HttpClient::Preconditions.assert_class('harmonized_item_form', harmonized_item_form, ::Io::Flow::Harmonization::V0::Models::HarmonizedItemForm)
              r = @client.request("/#{CGI.escape(organization)}/harmonization/items").with_json(harmonized_item_form.to_json).post
              ::Io::Flow::Harmonization::V0::Models::HarmonizedItem.new(r)
            end

            # Create or update an item to harmonize
            def put_by_number(organization, number, harmonized_item_put_form)
              HttpClient::Preconditions.assert_class('organization', organization, String)
              HttpClient::Preconditions.assert_class('number', number, String)
              HttpClient::Preconditions.assert_class('harmonized_item_put_form', harmonized_item_put_form, ::Io::Flow::Harmonization::V0::Models::HarmonizedItemPutForm)
              r = @client.request("/#{CGI.escape(organization)}/harmonization/items/#{CGI.escape(number)}").with_json(harmonized_item_put_form.to_json).put
              ::Io::Flow::Harmonization::V0::Models::HarmonizedItem.new(r)
            end

            def delete_by_number(organization, number)
              HttpClient::Preconditions.assert_class('organization', organization, String)
              HttpClient::Preconditions.assert_class('number', number, String)
              r = @client.request("/#{CGI.escape(organization)}/harmonization/items/#{CGI.escape(number)}").delete
              nil
            end

          end

          class HarmonizedItemDuties

            def initialize(client)
              @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::Harmonization::V0::Client)
            end

            def get(organization, incoming={})
              HttpClient::Preconditions.assert_class('organization', organization, String)
              opts = HttpClient::Helper.symbolize_keys(incoming)
              query = {
                :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
                :number => (x = opts.delete(:number); x.nil? ? nil : HttpClient::Preconditions.assert_class('number', x, Array).map { |v| HttpClient::Preconditions.assert_class('number', v, String) }),
                :origin => (x = opts.delete(:origin); x.nil? ? nil : HttpClient::Preconditions.assert_class('origin', x, String)),
                :destination => (x = opts.delete(:destination); x.nil? ? nil : HttpClient::Preconditions.assert_class('destination', x, String)),
                :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
                :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
                :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
              }.delete_if { |k, v| v.nil? }
              r = @client.request("/#{CGI.escape(organization)}/harmonization/item-duties").with_query(query).get
              r.map { |x| ::Io::Flow::Harmonization::V0::Models::HarmonizedItemDuty.new(x) }
            end

            # Provides visibility into recent changes of each object, including deletion
            def get_versions(organization, incoming={})
              HttpClient::Preconditions.assert_class('organization', organization, String)
              opts = HttpClient::Helper.symbolize_keys(incoming)
              query = {
                :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
                :harmonized_item_duty_id => (x = opts.delete(:harmonized_item_duty_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('harmonized_item_duty_id', x, Array).map { |v| HttpClient::Preconditions.assert_class('harmonized_item_duty_id', v, String) }),
                :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
                :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
                :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
              }.delete_if { |k, v| v.nil? }
              r = @client.request("/#{CGI.escape(organization)}/harmonization/item-duties/versions").with_query(query).get
              r.map { |x| ::Io::Flow::Harmonization::V0::Models::HarmonizedItemDutyVersion.new(x) }
            end

            def get_by_id(organization, id)
              HttpClient::Preconditions.assert_class('organization', organization, String)
              HttpClient::Preconditions.assert_class('id', id, String)
              r = @client.request("/#{CGI.escape(organization)}/harmonization/item-duties/#{CGI.escape(id)}").get
              ::Io::Flow::Harmonization::V0::Models::HarmonizedItemDuty.new(r)
            end

            def post(organization, harmonized_item_duty_form)
              HttpClient::Preconditions.assert_class('organization', organization, String)
              HttpClient::Preconditions.assert_class('harmonized_item_duty_form', harmonized_item_duty_form, ::Io::Flow::Harmonization::V0::Models::HarmonizedItemDutyForm)
              r = @client.request("/#{CGI.escape(organization)}/harmonization/item-duties").with_json(harmonized_item_duty_form.to_json).post
              ::Io::Flow::Harmonization::V0::Models::HarmonizedItemDuty.new(r)
            end

            def delete_by_id(organization, id)
              HttpClient::Preconditions.assert_class('organization', organization, String)
              HttpClient::Preconditions.assert_class('id', id, String)
              r = @client.request("/#{CGI.escape(organization)}/harmonization/item-duties/#{CGI.escape(id)}").delete
              nil
            end

          end

          class Hs10

            def initialize(client)
              @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::Harmonization::V0::Client)
            end

            def get(organization, incoming={})
              HttpClient::Preconditions.assert_class('organization', organization, String)
              opts = HttpClient::Helper.symbolize_keys(incoming)
              query = {
                :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
                :item_number => (x = opts.delete(:item_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('item_number', x, Array).map { |v| HttpClient::Preconditions.assert_class('item_number', v, String) }),
                :origin => (x = opts.delete(:origin); x.nil? ? nil : HttpClient::Preconditions.assert_class('origin', x, String)),
                :destination => (x = opts.delete(:destination); x.nil? ? nil : HttpClient::Preconditions.assert_class('destination', x, String)),
                :code => (x = opts.delete(:code); x.nil? ? nil : HttpClient::Preconditions.assert_class('code', x, String)),
                :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
                :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
                :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
              }.delete_if { |k, v| v.nil? }
              r = @client.request("/#{CGI.escape(organization)}/harmonization/hs10").with_query(query).get
              r.map { |x| ::Io::Flow::Harmonization::V0::Models::Hs10.new(x) }
            end

            # Provides visibility into recent changes of each object, including deletion
            def get_versions(organization, incoming={})
              HttpClient::Preconditions.assert_class('organization', organization, String)
              opts = HttpClient::Helper.symbolize_keys(incoming)
              query = {
                :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
                :hs10_id => (x = opts.delete(:hs10_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('hs10_id', x, Array).map { |v| HttpClient::Preconditions.assert_class('hs10_id', v, String) }),
                :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
                :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
                :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
              }.delete_if { |k, v| v.nil? }
              r = @client.request("/#{CGI.escape(organization)}/harmonization/hs10/versions").with_query(query).get
              r.map { |x| ::Io::Flow::Harmonization::V0::Models::Hs10Version.new(x) }
            end

          end

          class Hs6

            def initialize(client)
              @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::Harmonization::V0::Client)
            end

            def get(organization, incoming={})
              HttpClient::Preconditions.assert_class('organization', organization, String)
              opts = HttpClient::Helper.symbolize_keys(incoming)
              query = {
                :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
                :item_number => (x = opts.delete(:item_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('item_number', x, Array).map { |v| HttpClient::Preconditions.assert_class('item_number', v, String) }),
                :code => (x = opts.delete(:code); x.nil? ? nil : HttpClient::Preconditions.assert_class('code', x, String)),
                :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
                :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
                :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
              }.delete_if { |k, v| v.nil? }
              r = @client.request("/#{CGI.escape(organization)}/harmonization/hs6").with_query(query).get
              r.map { |x| ::Io::Flow::Harmonization::V0::Models::Hs6.new(x) }
            end

            # Provides visibility into recent changes of each object, including deletion
            def get_versions(organization, incoming={})
              HttpClient::Preconditions.assert_class('organization', organization, String)
              opts = HttpClient::Helper.symbolize_keys(incoming)
              query = {
                :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
                :hs6_id => (x = opts.delete(:hs6_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('hs6_id', x, Array).map { |v| HttpClient::Preconditions.assert_class('hs6_id', v, String) }),
                :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
                :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
                :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
              }.delete_if { |k, v| v.nil? }
              r = @client.request("/#{CGI.escape(organization)}/harmonization/hs6/versions").with_query(query).get
              r.map { |x| ::Io::Flow::Harmonization::V0::Models::Hs6Version.new(x) }
            end

          end

          class Taxes

            def initialize(client)
              @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::Harmonization::V0::Client)
            end

            def get(organization, incoming={})
              HttpClient::Preconditions.assert_class('organization', organization, String)
              opts = HttpClient::Helper.symbolize_keys(incoming)
              query = {
                :address => (x = opts.delete(:address); x.nil? ? nil : HttpClient::Preconditions.assert_class('address', x, String)),
                :ip => (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String)),
                :latitude => (x = opts.delete(:latitude); x.nil? ? nil : HttpClient::Preconditions.assert_class('latitude', x, String)),
                :longitude => (x = opts.delete(:longitude); x.nil? ? nil : HttpClient::Preconditions.assert_class('longitude', x, String))
              }.delete_if { |k, v| v.nil? }
              r = @client.request("/#{CGI.escape(organization)}/harmonization/taxes").with_query(query).get
              ::Io::Flow::Harmonization::V0::Models::Tax.new(r)
            end

          end

        end

        module Models

          class Deminimus

            module Types
              DEMINIMUS_SIMPLE = 'deminimus_simple' unless defined?(DEMINIMUS_SIMPLE)
            end

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:name], 'Deminimus')
              @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            end

            def to_hash
              subtype_to_hash.merge(:discriminator => @name)
            end

            def Deminimus.from_json(hash)
              HttpClient::Preconditions.assert_class('hash', hash, Hash)
              case HttpClient::Helper.symbolize_keys(hash)[:discriminator]
                when Types::DEMINIMUS_SIMPLE; DeminimusSimple.new(hash)
                else DeminimusUndefinedType.new(:name => union_type_name)
              end
            end

          end

          class DeminimusUndefinedType < Deminimus

            attr_reader :name

            def initialize(incoming={})
              super(:name => 'undefined_type')
              opts = HttpClient::Helper.symbolize_keys(incoming)
              @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            end

            def subtype_to_hash
              raise 'Unable to serialize undefined type to json'
            end

            def copy(incoming={})
              raise 'Operation not supported for undefined type'
            end

            def to_hash
              raise 'Operation not supported for undefined type'
            end

          end

          class LevyComponent

            attr_reader :value

            def initialize(value)
              @value = HttpClient::Preconditions.assert_class('value', value, String)
            end

            # Returns the instance of LevyComponent for this value, creating a new instance for an unknown value
            def LevyComponent.apply(value)
              if value.instance_of?(LevyComponent)
                value
              else
                HttpClient::Preconditions.assert_class_or_nil('value', value, String)
                value.nil? ? nil : (from_string(value) || LevyComponent.new(value))
              end
            end

            # Returns the instance of LevyComponent for this value, or nil if not found
            def LevyComponent.from_string(value)
              HttpClient::Preconditions.assert_class('value', value, String)
              LevyComponent.ALL.find { |v| v.value == value }
            end

            def LevyComponent.ALL
              @@all ||= [LevyComponent.goods, LevyComponent.duty, LevyComponent.insurance, LevyComponent.freight, LevyComponent.vat]
            end

            # The value of goods
            def LevyComponent.goods
              @@_goods ||= LevyComponent.new('goods')
            end

            def LevyComponent.duty
              @@_duty ||= LevyComponent.new('duty')
            end

            def LevyComponent.insurance
              @@_insurance ||= LevyComponent.new('insurance')
            end

            def LevyComponent.freight
              @@_freight ||= LevyComponent.new('freight')
            end

            # Value-Added Tax
            def LevyComponent.vat
              @@_vat ||= LevyComponent.new('vat')
            end

            def to_hash
              value
            end

          end

          class LevyStrategy

            attr_reader :value

            def initialize(value)
              @value = HttpClient::Preconditions.assert_class('value', value, String)
            end

            # Returns the instance of LevyStrategy for this value, creating a new instance for an unknown value
            def LevyStrategy.apply(value)
              if value.instance_of?(LevyStrategy)
                value
              else
                HttpClient::Preconditions.assert_class_or_nil('value', value, String)
                value.nil? ? nil : (from_string(value) || LevyStrategy.new(value))
              end
            end

            # Returns the instance of LevyStrategy for this value, or nil if not found
            def LevyStrategy.from_string(value)
              HttpClient::Preconditions.assert_class('value', value, String)
              LevyStrategy.ALL.find { |v| v.value == value }
            end

            def LevyStrategy.ALL
              @@all ||= [LevyStrategy.minimum, LevyStrategy.average, LevyStrategy.maximum]
            end

            def LevyStrategy.minimum
              @@_minimum ||= LevyStrategy.new('minimum')
            end

            def LevyStrategy.average
              @@_average ||= LevyStrategy.new('average')
            end

            def LevyStrategy.maximum
              @@_maximum ||= LevyStrategy.new('maximum')
            end

            def to_hash
              value
            end

          end

          class DeminimusSimple < Deminimus

            attr_reader :value, :currency, :components, :minimum

            def initialize(incoming={})
              super(:name => Deminimus::Types::DEMINIMUS_SIMPLE)
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:value, :currency, :components, :minimum], 'DeminimusSimple')
              @value = HttpClient::Preconditions.assert_class('value', HttpClient::Helper.to_big_decimal(opts.delete(:value)), BigDecimal)
              @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
              @components = HttpClient::Preconditions.assert_class('components', opts.delete(:components), Array).map { |v| (x = v; x.is_a?(::Io::Flow::Harmonization::V0::Models::LevyComponent) ? x : ::Io::Flow::Harmonization::V0::Models::LevyComponent.apply(x)) }
              @minimum = HttpClient::Preconditions.assert_class('minimum', HttpClient::Helper.to_big_decimal(opts.delete(:minimum)), BigDecimal)
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              DeminimusSimple.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def subtype_to_hash
              {
                :value => value,
                :currency => currency,
                :components => components.map { |o| o.value },
                :minimum => minimum
              }
            end

          end

          # Represents a simple model of duties that apply to a given item / trade lane.
          class Duty

            attr_reader :rate, :components, :deminimus

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:rate, :components], 'Duty')
              @rate = HttpClient::Preconditions.assert_class('rate', HttpClient::Helper.to_big_decimal(opts.delete(:rate)), BigDecimal)
              @components = HttpClient::Preconditions.assert_class('components', opts.delete(:components), Array).map { |v| (x = v; x.is_a?(::Io::Flow::Harmonization::V0::Models::LevyComponent) ? x : ::Io::Flow::Harmonization::V0::Models::LevyComponent.apply(x)) }
              @deminimus = (x = opts.delete(:deminimus); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::Harmonization::V0::Models::Deminimus) ? x : ::Io::Flow::Harmonization::V0::Models::Deminimus.from_json(x)))
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              Duty.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :rate => rate,
                :components => components.map { |o| o.value },
                :deminimus => deminimus.nil? ? nil : deminimus.to_hash
              }
            end

          end

          # Organization level settings.
          class HarmonizationSettings

            attr_reader :duty_strategy, :tax_strategy

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              @duty_strategy = (x = (x = opts.delete(:duty_strategy); x.nil? ? "maximum" : x); x.is_a?(::Io::Flow::Harmonization::V0::Models::LevyStrategy) ? x : ::Io::Flow::Harmonization::V0::Models::LevyStrategy.apply(x))
              @tax_strategy = (x = (x = opts.delete(:tax_strategy); x.nil? ? "maximum" : x); x.is_a?(::Io::Flow::Harmonization::V0::Models::LevyStrategy) ? x : ::Io::Flow::Harmonization::V0::Models::LevyStrategy.apply(x))
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              HarmonizationSettings.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :duty_strategy => duty_strategy.value,
                :tax_strategy => tax_strategy.value
              }
            end

          end

          class HarmonizationSettingsForm

            attr_reader :duty_strategy, :tax_strategy

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              @duty_strategy = (x = opts.delete(:duty_strategy); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::Harmonization::V0::Models::LevyStrategy) ? x : ::Io::Flow::Harmonization::V0::Models::LevyStrategy.apply(x)))
              @tax_strategy = (x = opts.delete(:tax_strategy); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::Harmonization::V0::Models::LevyStrategy) ? x : ::Io::Flow::Harmonization::V0::Models::LevyStrategy.apply(x)))
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              HarmonizationSettingsForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :duty_strategy => duty_strategy.nil? ? nil : duty_strategy.value,
                :tax_strategy => tax_strategy.nil? ? nil : tax_strategy.value
              }
            end

          end

          # A harmonized item stores explicit information about this item for the purposes
          # of harmonization / classification. The harmonization process begins by
          # creating a harmonized item; this kicks off the internal processes. Once
          # assigned, codes will be available via the hs6 and hs10 resources
          class HarmonizedItem

            attr_reader :id, :number, :name, :description, :categories, :metadata

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:id, :number, :name], 'HarmonizedItem')
              @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
              @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
              @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
              @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
              @categories = HttpClient::Preconditions.assert_class('categories', (x = opts.delete(:categories); x.nil? ? [] : x), Array).map { |v| HttpClient::Preconditions.assert_class('categories', v, String) }
              @metadata = HttpClient::Preconditions.assert_class('metadata', (x = opts.delete(:metadata); x.nil? ? {} : x), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('metadata', d[1], String); h }
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              HarmonizedItem.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :id => id,
                :number => number,
                :name => name,
                :description => description,
                :categories => categories,
                :metadata => metadata
              }
            end

          end

          # Used to specifically set an item's duty rate for a given trade lane.
          class HarmonizedItemDuty

            attr_reader :id, :item, :origin, :destination, :rate

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:id, :item, :origin, :destination, :rate], 'HarmonizedItemDuty')
              @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
              @item = (x = opts.delete(:item); x.is_a?(::Io::Flow::Harmonization::V0::Models::HarmonizedItemReference) ? x : ::Io::Flow::Harmonization::V0::Models::HarmonizedItemReference.new(x))
              @origin = HttpClient::Preconditions.assert_class('origin', opts.delete(:origin), String)
              @destination = HttpClient::Preconditions.assert_class('destination', opts.delete(:destination), String)
              @rate = HttpClient::Preconditions.assert_class('rate', HttpClient::Helper.to_big_decimal(opts.delete(:rate)), BigDecimal)
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              HarmonizedItemDuty.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :id => id,
                :item => item.to_hash,
                :origin => origin,
                :destination => destination,
                :rate => rate
              }
            end

          end

          class HarmonizedItemDutyForm

            attr_reader :number, :origin, :destination, :rate

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:number, :origin, :destination, :rate], 'HarmonizedItemDutyForm')
              @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
              @origin = HttpClient::Preconditions.assert_class('origin', opts.delete(:origin), String)
              @destination = HttpClient::Preconditions.assert_class('destination', opts.delete(:destination), String)
              @rate = HttpClient::Preconditions.assert_class('rate', HttpClient::Helper.to_big_decimal(opts.delete(:rate)), BigDecimal)
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              HarmonizedItemDutyForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :number => number,
                :origin => origin,
                :destination => destination,
                :rate => rate
              }
            end

          end

          class HarmonizedItemDutyVersion

            attr_reader :id, :timestamp, :type, :harmonized_item_duty

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :harmonized_item_duty], 'HarmonizedItemDutyVersion')
              @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
              @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
              @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::Common::V0::Models::ChangeType) ? x : ::Io::Flow::Common::V0::Models::ChangeType.apply(x))
              @harmonized_item_duty = (x = opts.delete(:harmonized_item_duty); x.is_a?(::Io::Flow::Harmonization::V0::Models::HarmonizedItemDuty) ? x : ::Io::Flow::Harmonization::V0::Models::HarmonizedItemDuty.new(x))
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              HarmonizedItemDutyVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :id => id,
                :timestamp => timestamp,
                :type => type.value,
                :harmonized_item_duty => harmonized_item_duty.to_hash
              }
            end

          end

          class HarmonizedItemForm

            attr_reader :name, :number, :categories, :description, :metadata

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:name, :number], 'HarmonizedItemForm')
              @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
              @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
              @categories = (x = opts.delete(:categories); x.nil? ? nil : HttpClient::Preconditions.assert_class('categories', x, Array).map { |v| HttpClient::Preconditions.assert_class('categories', v, String) })
              @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
              @metadata = (x = opts.delete(:metadata); x.nil? ? nil : HttpClient::Preconditions.assert_class('metadata', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('metadata', d[1], String); h })
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              HarmonizedItemForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :name => name,
                :number => number,
                :categories => categories.nil? ? nil : categories,
                :description => description,
                :metadata => metadata.nil? ? nil : metadata
              }
            end

          end

          class HarmonizedItemPutForm

            attr_reader :name, :categories, :description, :metadata

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:name], 'HarmonizedItemPutForm')
              @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
              @categories = (x = opts.delete(:categories); x.nil? ? nil : HttpClient::Preconditions.assert_class('categories', x, Array).map { |v| HttpClient::Preconditions.assert_class('categories', v, String) })
              @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
              @metadata = (x = opts.delete(:metadata); x.nil? ? nil : HttpClient::Preconditions.assert_class('metadata', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('metadata', d[1], String); h })
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              HarmonizedItemPutForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :name => name,
                :categories => categories.nil? ? nil : categories,
                :description => description,
                :metadata => metadata.nil? ? nil : metadata
              }
            end

          end

          class HarmonizedItemReference

            attr_reader :id, :number

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:id, :number], 'HarmonizedItemReference')
              @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
              @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              HarmonizedItemReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :id => id,
                :number => number
              }
            end

          end

          class HarmonizedItemVersion

            attr_reader :id, :timestamp, :type, :harmonized_item

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :harmonized_item], 'HarmonizedItemVersion')
              @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
              @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
              @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::Common::V0::Models::ChangeType) ? x : ::Io::Flow::Common::V0::Models::ChangeType.apply(x))
              @harmonized_item = (x = opts.delete(:harmonized_item); x.is_a?(::Io::Flow::Harmonization::V0::Models::HarmonizedItem) ? x : ::Io::Flow::Harmonization::V0::Models::HarmonizedItem.new(x))
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              HarmonizedItemVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :id => id,
                :timestamp => timestamp,
                :type => type.value,
                :harmonized_item => harmonized_item.to_hash
              }
            end

          end

          # The (Harmonized System) HS-10 code assigned to an item with a given
          # origin/destination pair.
          class Hs10

            attr_reader :id, :item, :origin, :destination, :code

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:id, :item, :origin, :destination, :code], 'Hs10')
              @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
              @item = (x = opts.delete(:item); x.is_a?(::Io::Flow::Harmonization::V0::Models::HarmonizedItemReference) ? x : ::Io::Flow::Harmonization::V0::Models::HarmonizedItemReference.new(x))
              @origin = HttpClient::Preconditions.assert_class('origin', opts.delete(:origin), String)
              @destination = HttpClient::Preconditions.assert_class('destination', opts.delete(:destination), String)
              @code = HttpClient::Preconditions.assert_class('code', opts.delete(:code), String)
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              Hs10.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :id => id,
                :item => item.to_hash,
                :origin => origin,
                :destination => destination,
                :code => code
              }
            end

          end

          class Hs10Version

            attr_reader :id, :timestamp, :type, :hs10

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :hs10], 'Hs10Version')
              @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
              @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
              @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::Common::V0::Models::ChangeType) ? x : ::Io::Flow::Common::V0::Models::ChangeType.apply(x))
              @hs10 = (x = opts.delete(:hs10); x.is_a?(::Io::Flow::Harmonization::V0::Models::Hs10) ? x : ::Io::Flow::Harmonization::V0::Models::Hs10.new(x))
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              Hs10Version.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :id => id,
                :timestamp => timestamp,
                :type => type.value,
                :hs10 => hs10.to_hash
              }
            end

          end

          # The (Harmonized System) HS-6 code assigned to an item.
          class Hs6

            attr_reader :id, :item, :code

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:id, :item, :code], 'Hs6')
              @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
              @item = (x = opts.delete(:item); x.is_a?(::Io::Flow::Harmonization::V0::Models::HarmonizedItemReference) ? x : ::Io::Flow::Harmonization::V0::Models::HarmonizedItemReference.new(x))
              @code = HttpClient::Preconditions.assert_class('code', opts.delete(:code), String)
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              Hs6.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :id => id,
                :item => item.to_hash,
                :code => code
              }
            end

          end

          class Hs6Version

            attr_reader :id, :timestamp, :type, :hs6

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :hs6], 'Hs6Version')
              @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
              @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
              @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::Common::V0::Models::ChangeType) ? x : ::Io::Flow::Common::V0::Models::ChangeType.apply(x))
              @hs6 = (x = opts.delete(:hs6); x.is_a?(::Io::Flow::Harmonization::V0::Models::Hs6) ? x : ::Io::Flow::Harmonization::V0::Models::Hs6.new(x))
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              Hs6Version.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :id => id,
                :timestamp => timestamp,
                :type => type.value,
                :hs6 => hs6.to_hash
              }
            end

          end

          # Represents a simple model of taxes that apply to a given item / destination.
          class Tax

            attr_reader :name, :rate, :components, :deminimus

            def initialize(incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              HttpClient::Preconditions.require_keys(opts, [:name, :rate, :components], 'Tax')
              @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
              @rate = HttpClient::Preconditions.assert_class('rate', HttpClient::Helper.to_big_decimal(opts.delete(:rate)), BigDecimal)
              @components = HttpClient::Preconditions.assert_class('components', opts.delete(:components), Array).map { |v| (x = v; x.is_a?(::Io::Flow::Harmonization::V0::Models::LevyComponent) ? x : ::Io::Flow::Harmonization::V0::Models::LevyComponent.apply(x)) }
              @deminimus = (x = opts.delete(:deminimus); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::Harmonization::V0::Models::Deminimus) ? x : ::Io::Flow::Harmonization::V0::Models::Deminimus.from_json(x)))
            end

            def to_json
              JSON.dump(to_hash)
            end

            def copy(incoming={})
              Tax.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
            end

            def to_hash
              {
                :name => name,
                :rate => rate,
                :components => components.map { |o| o.value },
                :deminimus => deminimus.nil? ? nil : deminimus.to_hash
              }
            end

          end

        end

        # ===== END OF SERVICE DEFINITION =====
        module HttpClient

          class Request

            def initialize(uri)
              @uri = Preconditions.assert_class('uri', uri, URI)
              @params = nil
              @body = nil
              @auth = nil
              @headers = {}
              @header_keys_lower_case = []
            end

            def with_header(name, value)
              Preconditions.check_not_blank('name', name, "Header name is required")
              Preconditions.check_not_blank('value', value, "Header value is required")
              Preconditions.check_state(!@headers.has_key?(name),
                                        "Duplicate header named[%s]" % name)
              @headers[name] = value
              @header_keys_lower_case << name.downcase
              self
            end

            def with_auth(auth)
              Preconditions.assert_class('auth', auth, HttpClient::Authorization)
              Preconditions.check_state(@auth.nil?, "auth previously set")

              if auth.scheme.name == AuthScheme::BASIC.name
                @auth = auth
              else
                raise "Auth Scheme[#{auth.scheme.name}] not supported"
              end
              self
            end

            def with_query(params)
              Preconditions.assert_class('params', params, Hash)
              Preconditions.check_state(@params.nil?, "Already have query parameters")
              @params = params
              self
            end

            # Wrapper to set Content-Type header to application/json and set
            # the provided json document as the body
            def with_json(json)
              @headers['Content-Type'] ||= 'application/json; charset=UTF-8'
              with_body(json)
            end

            def with_body(body)
              Preconditions.check_not_blank('body', body)
              @body = body
              self
            end

            # Creates a new Net:HTTP client. The client returned should be
            # fully configured to make a request.
            def new_http_client
              client = Net::HTTP.new(@uri.host, @uri.port)
              if @uri.scheme == "https"
                configure_ssl(client)
              end
              client
            end

            # If HTTPS is required, this method accepts an HTTP Client and configures SSL
            def configure_ssl(http)
              Preconditions.assert_class('http', http, Net::HTTP)
              http.use_ssl = true
              http.verify_mode = OpenSSL::SSL::VERIFY_PEER
              http.cert_store = OpenSSL::X509::Store.new
              http.cert_store.set_default_paths
            end

            def get(&block)
              do_request(Net::HTTP::Get, &block)
            end

            def delete(&block)
              do_request(Net::HTTP::Delete, &block)
            end

            def options(&block)
              do_request(Net::HTTP::Options, &block)
            end

            def post(&block)
              do_request(Net::HTTP::Post, &block)
            end

            def put(&block)
              do_request(Net::HTTP::Put, &block)
            end

            class PATCH < Net::HTTP::Put
              METHOD = "PATCH"
            end

            def patch(&block)
              do_request(PATCH, &block)
            end

            def do_request(klass)
              Preconditions.assert_class('klass', klass, Class)

              uri = @uri.to_s
              if q = to_query(@params)
                uri += "?%s" % q
              end

              request = klass.send(:new, uri)

              curl = ['curl']
              if klass != Net::HTTP::Get
                curl << "-X%s" % klass.name.split("::").last.upcase
              end

              if @body
                # DEBUG path = "/tmp/rest_client.tmp"
                # DEBUG File.open(path, "w") { |os| os << @body.to_s }
                # DEBUG curl << "-d@%s" % path
                request.body = @body
              end

              if @auth
                curl << "-u \"%s:%s\"" % [@auth.username, @auth.password]
                Preconditions.check_state(!@header_keys_lower_case.include?("authorization"),
                                          "Cannot specify both an Authorization header and an auth instance")
                user_pass = "%s:%s" % [@auth.username, @auth.password]
                encoded = Base64.encode64(user_pass).to_s.split("\n").map(&:strip).join
                request.add_field("Authorization", "Basic %s" % encoded)
              end

              @headers.each { |key, value|
                curl <<  "-H \"%s: %s\"" % [key, value]
                request.add_field(key, value)
              }

              curl << "'%s'" % uri
              # DEBUG puts curl.join(" ")

              raw_response = http_request(request)
              response = raw_response.to_s == "" ? nil : JSON.parse(raw_response)

              if block_given?
                yield response
              else
                response
              end
            end

            private
            def to_query(params={})
              parts = (params || {}).map { |k,v|
                if v.respond_to?(:each)
                  v.map { |el| "%s=%s" % [k, CGI.escape(el.to_s)] }
                else
                  "%s=%s" % [k, CGI.escape(v.to_s)]
                end
              }
              parts.empty? ? nil : parts.join("&")
            end

            def http_request(request)
              response = begin
                           new_http_client.request(request)
                         rescue SocketError => e
                           raise Exception.new("Error accessing uri[#{@uri}]: #{e}")
                         end

              case response
              when Net::HTTPSuccess
                response.body
              else
                body = response.body rescue nil
                raise HttpClient::ServerError.new(response.code.to_i, response.message, :body => body, :uri => @uri.to_s)
              end
            end
          end

          class ServerError < StandardError

            attr_reader :code, :details, :body, :uri

            def initialize(code, details, incoming={})
              opts = HttpClient::Helper.symbolize_keys(incoming)
              @code = HttpClient::Preconditions.assert_class('code', code, Integer)
              @details = HttpClient::Preconditions.assert_class('details', details, String)
              @body = HttpClient::Preconditions.assert_class_or_nil('body', opts.delete(:body), String)
              @uri = HttpClient::Preconditions.assert_class_or_nil('uri', opts.delete(:uri), String)
              HttpClient::Preconditions.assert_empty_opts(opts)
              super(self.message)
            end

            def message
              m = "%s %s" % [@code, @details]
              if @body
                m << ": %s" % @body
              end
              m
            end

            def body_json
              JSON.parse(@body)
            end

          end

          class PreconditionException < Exception

            attr_reader :message

            def initialize(message)
              super(message)
              @message = message
            end

          end

          module Preconditions

            def Preconditions.check_argument(expression, error_message=nil)
              if !expression
                raise PreconditionException.new(error_message || "check_argument failed")
              end
              nil
            end

            def Preconditions.check_state(expression, error_message=nil)
              if !expression
                raise PreconditionException.new(error_message || "check_state failed")
              end
              nil
            end

            def Preconditions.check_not_nil(field_name, reference, error_message=nil)
              if reference.nil?
                raise PreconditionException.new(error_message || "argument for %s cannot be nil" % field_name)
              end
              reference
            end

            def Preconditions.check_not_blank(field_name, reference, error_message=nil)
              if reference.to_s.strip == ""
                raise PreconditionException.new(error_message || "argument for %s cannot be blank" % field_name)
              end
              reference
            end

            # Throws an error if opts is not empty. Useful when parsing
            # arguments to a function
            def Preconditions.assert_empty_opts(opts)
              if !opts.empty?
                raise PreconditionException.new("Invalid opts: #{opts.keys.inspect}\n#{opts.inspect}")
              end
            end

            # Requires that the provided hash has the specified keys.
            # @param fields A list of symbols
            def Preconditions.require_keys(hash, fields, error_prefix=nil)
              missing = fields.select { |f| !hash.has_key?(f) }
              if !missing.empty?
                msg = "Missing required fields: " + missing.join(", ")
                raise PreconditionException.new(error_prefix.empty? ? msg : "#{error_prefix}: #{msg}")
              end
            end

            # Asserts that value is not nill and is_?(klass). Returns
            # value. Common use is
            #
            # amount = Preconditions.assert_class('amount', amount, BigDecimal)
            def Preconditions.assert_class(field_name, value, klass)
              Preconditions.check_not_nil('field_name', field_name)
              Preconditions.check_not_nil('klass', klass)
              Preconditions.check_not_nil('value', value, "Value for %s cannot be nil. Expected an instance of class %s" % [field_name, klass.name])
              Preconditions.check_state(value.is_a?(klass),
                                        "Value for #{field_name} is of type[#{value.class}] - class[#{klass}] is required. value[#{value.inspect.to_s}]")
              value
            end

            def Preconditions.assert_class_or_nil(field_name, value, klass)
              if !value.nil?
                Preconditions.assert_class(field_name, value, klass)
              end
            end

            def Preconditions.assert_boolean(field_name, value)
              Preconditions.check_not_nil('field_name', field_name)
              Preconditions.check_not_nil('value', value, "Value for %s cannot be nil. Expected an instance of TrueClass or FalseClass" % field_name)
              Preconditions.check_state(value.is_a?(TrueClass) || value.is_a?(FalseClass),
                                        "Value for #{field_name} is of type[#{value.class}] - class[TrueClass or FalseClass] is required. value[#{value.inspect.to_s}]")
              value
            end

            def Preconditions.assert_boolean_or_nil(field_name, value)
              if !value.nil?
                Preconditions.assert_boolean(field_name, value)
              end
            end

            def Preconditions.assert_collection_of_class(field_name, values, klass)
              Preconditions.assert_class(field_name, values, Array)
              values.each { |v| Preconditions.assert_class(field_name, v, klass) }
            end

            def Preconditions.assert_hash_of_class(field_name, hash, klass)
              Preconditions.assert_class(field_name, hash, Hash)
              values.each { |k, v| Preconditions.assert_class(field_name, v, klass) }
            end

          end

          class AuthScheme

            attr_reader :name

            def initialize(name)
              @name = HttpClient::Preconditions.check_not_blank('name', name)
            end

            BASIC = AuthScheme.new("basic") unless defined?(BASIC)

          end

          class Authorization

            attr_reader :scheme, :username, :password

            def initialize(scheme, username, opts={})
              @scheme = HttpClient::Preconditions.assert_class('schema', scheme, AuthScheme)
              @username = HttpClient::Preconditions.check_not_blank('username', username, "username is required")
              @password = HttpClient::Preconditions.assert_class_or_nil('password', opts.delete(:password), String)
              HttpClient::Preconditions.assert_empty_opts(opts)
            end

            def Authorization.basic(username, password=nil)
              Authorization.new(AuthScheme::BASIC, username, :password => password)
            end

          end

          module Helper

            def Helper.symbolize_keys(hash)
              Preconditions.assert_class('hash', hash, Hash)
              new_hash = {}
              hash.each { |k, v|
                new_hash[k.to_sym] = v
              }
              new_hash
            end

            def Helper.to_big_decimal(value)
              value ? BigDecimal.new(value.to_s) : nil
            end

            def Helper.to_object(value)
              value ? JSON.parse(value) : nil
            end

            def Helper.to_uuid(value)
              Preconditions.check_state(value.nil? || value.match(/^\w\w\w\w\w\w\w\w\-\w\w\w\w\-\w\w\w\w\-\w\w\w\w\-\w\w\w\w\w\w\w\w\w\w\w\w$/),
                                        "Invalid guid[%s]" % value)
              value
            end

            def Helper.to_date_iso8601(value)
              if value.is_a?(Date)
                value
              elsif value
                Date.parse(value.to_s)
              else
                nil
              end
            end

            def Helper.to_date_time_iso8601(value)
              if value.is_a?(DateTime)
                value
              elsif value
                DateTime.parse(value.to_s)
              else
                nil
              end
            end

            def Helper.date_iso8601_to_string(value)
              value.nil? ? nil : value.strftime('%Y-%m-%d')
            end

            def Helper.date_time_iso8601_to_string(value)
              value.nil? ? nil : value.strftime('%Y-%m-%dT%H:%M:%S%z')
            end

            TRUE_STRINGS = ['t', 'true', 'y', 'yes', 'on', '1', 'trueclass'] unless defined?(TRUE_STRINGS)
            FALSE_STRINGS = ['f', 'false', 'n', 'no', 'off', '0', 'falseclass'] unless defined?(FALSE_STRINGS)

            def Helper.to_boolean(field_name, value)
              string = value.to_s.strip.downcase
              if TRUE_STRINGS.include?(string)
                true
              elsif FALSE_STRINGS.include?(string)
                false
              elsif string != ""
                raise PreconditionException.new("Unsupported boolean value[#{string}]. For true, must be one of: #{TRUE_STRINGS.inspect}. For false, must be one of: #{FALSE_STRINGS.inspect}")
              else
                nil
              end
            end

          end

        end
      end
    end
  end
end